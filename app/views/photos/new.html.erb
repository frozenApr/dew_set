<%= form_for @photo do |f| %>

<%= f.fields_for :images do |ff| %>
<p>
  <div class="image_preview">

  </div>
  <div class="container", id="container">
    <%= f.label :image %><br>
    <%= f.file_field :url %>
  </div>
</p>
<% end %>

<p>
  <%= f.label :title %><br>
  <%= f.text_field :title %>
</p>

<p>
  <%= f.label :brief_intro %><br>
  <%= f.text_area :brief_intro %>
</p>

<p>
  <%= f.label :place %><br>
  <%= f.text_area :place %>
</p>

<p>
  <%= f.submit %>
</p>

<% end %>

<script type="text/javascript">
var uploader = Qiniu.uploader({
  runtimes: 'html5,html4',          //上传模式,依次退化
  browse_button: 'photo_url',       //上传选择的点选按钮，**必需**
  uptoken : '<%= @uptoken %>',
  unique_names: true, // 默认 false，key为文件名。若开启该选项，SDK会为每个文件自动生成key（文件名）
  save_key: true, // 默认 false。若在服务端生成uptoken的上传策略中指定了 `sava_key`，则开启，SDK在前端将不对key进行任何处理
  domain: '<%= @domain %>', //bucket 域名，下载资源时用到，**必需**
  container: 'container',           //上传区域DOM ID，默认是browser_button的父元素，
  max_file_size: '5mb',           //最大文件体积限制
  max_retries: 3,                   //上传失败最大重试次数
  dragdrop: true,                   //开启可拖曳上传
  drop_element: 'container',        //拖曳上传区域元素的ID，拖曳文件或文件夹后可触发上传
  chunk_size: '1mb',                //分块上传时，每片的体积
  auto_start: false,                 //选择文件后自动上传，若关闭需要自己绑定事件触发上传
  init: {
    'FilesAdded': function(up, files) {
      plupload.each(files, function(file) {
        // 文件添加进队列后,处理相关的事情
        showPreview (file); // 预览

        $(document).on('click', '.remove_btn', function(){
          var index = $(".remove_btn").index($(this));
          up.removeFile(up.files[index])
        })

      });
    },
    'BeforeUpload': function(up, file) {
      // 每个文件上传前,处理相关的事情
    },
    'UploadProgress': function(up, file) {
      // 每个文件上传时,处理相关的事情
    },
    'FileUploaded': function(up, file, info) {
      // 每个文件上传成功后,处理相关的事情
      // 其中 info 是文件上传成功后，服务端返回的json，形式如
      // {
      //    "hash": "Fh8xVqod2MQ1mocfI4S4KpRL6D98",
      //    "key": "gogopher.jpg"
      //  }
      // 参考http://developer.qiniu.com/docs/v6/api/overview/up/response/simple-response.html
      var domain = up.getOption('domain');
      var res = $.parseJSON(info);
      var image_url = domain + '/' + res.key; //获取上传成功后的文件的Url
      console.log(info);
      console.log(image_url);
      // $('.image_list').append('<img src='+ image_url +' class="preview">');
    },
    'Error': function(up, err, errTip) {
      //上传出错时,处理相关的事情
    },
    'UploadComplete': function() {
      //队列文件处理完毕后,处理相关的事情
    },
    'Key': function(up, file) {
      // 若想在前端对每个文件的key进行个性化处理，可以配置该函数
      // 该配置必须要在 unique_names: false , save_key: false 时才生效
      var key = "";
      // do something with key here
      return key
    },
  }
});

function showPreview (file){
  var preloader = new mOxie.Image();
  preloader.onload = function() {
    preloader.downsize( 300, 300 );
    var src = preloader.getAsDataURL();
    var html = '<img src='+ src +'><span class="remove_btn">删除</span>'
    $('.image_preview').append(html);
  };
  preloader.load( file.getSource() );
}

$("input[name='commit']").click(function(){
  uploader.start();
});
</script>
